@page "/models"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Models</h3>
<hr />
<br />

<a href="/models/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Model
</a>

@if(models == null)
{
    <div class="alert alert-info">Loading Models...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in models)
            {
                <tr>
                    <td>@model.Id</td>
                    <td>@model.Name</td>
                    <td>
                        <a href="/models/view/@model.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/models/edit/@model.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>DeleteAsync(model.Id))">
                            <span class="oi oi-delete"></span>    
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Model> models;

    protected async override Task OnInitializedAsync()
    {
        models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
    }

    private async Task DeleteAsync(int id)
    {
        var model = models.First(q => q.Id == id);

        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {model.Name}?"))
        {
            await _client.DeleteAsync($"{Endpoints.ModelsEndpoint}/{id}");
            await OnInitializedAsync();
        }
    }
}
